-- Summary of customer subscriptions
WITH SUMMARY AS (
    SELECT CUSTOMER_ID, COUNT(S.PLAN_ID) AS CNT, 
           MIN(START_DATE) AS MIN_DATE, MAX(START_DATE) AS MAX_DATE, 
           SUM(P.PRICE) AS TOTAL_AMOUNT_PAID
    FROM FOODIE_FI.SUBSCRIPTIONS S
    JOIN FOODIE_FI.PLANS P ON S.PLAN_ID = P.PLAN_ID
    GROUP BY CUSTOMER_ID
)

-- Top paying customers
SELECT CUSTOMER_ID, MIN_DATE, MAX_DATE, TOTAL_AMOUNT_PAID 
FROM SUMMARY 
WHERE CNT >= 3
ORDER BY TOTAL_AMOUNT_PAID DESC;

-- Number of customers who churned
SELECT ROUND(100.0 * SUM(CASE WHEN S.PLAN_ID = 4 THEN 1 ELSE 0 END) / COUNT(DISTINCT CUSTOMER_ID), 2) AS PCT_CHURN
FROM FOODIE_FI.PLANS P 
JOIN FOODIE_FI.SUBSCRIPTIONS S ON P.PLAN_ID = S.PLAN_ID;

-- Customer journey details
WITH CUST_JOURNEY AS (
    SELECT S.CUSTOMER_ID, P.PLAN_ID, P.PLAN_NAME, S.START_DATE,
           ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE) AS RN 
    FROM FOODIE_FI.PLANS P
    JOIN FOODIE_FI.SUBSCRIPTIONS S ON P.PLAN_ID = S.PLAN_ID
    WHERE S.CUSTOMER_ID IN (1, 2, 11, 13, 15, 16, 18, 19)
)

-- Onboarding information
SELECT CUSTOMER_ID, PLAN_ID, PLAN_NAME, START_DATE 
FROM CUST_JOURNEY 
WHERE RN = 1;

-- Customers who churned after trial
SELECT C1.CUSTOMER_ID 
FROM CUST_JOURNEY C1 
JOIN CUST_JOURNEY C2 ON C1.CUSTOMER_ID = C2.CUSTOMER_ID 
    AND C1.PLAN_ID = 0 
    AND C2.PLAN_ID = 4 
    AND C2.RN - C1.RN = 1
GROUP BY C1.CUSTOMER_ID;

-- Most bought plan after trial
SELECT PLAN_ID, COUNT(PLAN_ID) 
FROM CUST_JOURNEY 
WHERE RN = 2 
GROUP BY PLAN_ID;

-- Days between subscriptions
SELECT S.CUSTOMER_ID, P.PLAN_NAME, S.START_DATE,
       START_DATE - LAG(START_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE) AS DAYS_BETWEEN_SUBSCRIPTION
FROM FOODIE_FI.SUBSCRIPTIONS S 
JOIN FOODIE_FI.PLANS P ON S.PLAN_ID = P.PLAN_ID
WHERE S.CUSTOMER_ID IN (1, 2, 11, 13, 15, 16, 18, 19);

-- Number of customers ever
SELECT COUNT(DISTINCT CUSTOMER_ID) 
FROM FOODIE_FI.SUBSCRIPTIONS;

-- Monthly distribution of trial plan start dates
SELECT EXTRACT(MONTH FROM START_DATE) AS MONTH, COUNT(*)
FROM FOODIE_FI.SUBSCRIPTIONS S 
JOIN FOODIE_FI.PLANS P ON S.PLAN_ID = P.PLAN_ID 
WHERE P.PLAN_ID = 0
GROUP BY EXTRACT(MONTH FROM START_DATE)
ORDER BY MONTH;

-- Plan start dates after 2020 with breakdown
SELECT P.PLAN_NAME, COUNT(*)
FROM FOODIE_FI.SUBSCRIPTIONS S 
JOIN FOODIE_FI.PLANS P ON S.PLAN_ID = P.PLAN_ID 
WHERE EXTRACT(YEAR FROM S.START_DATE) > 2020
GROUP BY P.PLAN_NAME
ORDER BY COUNT(*) DESC;

-- Customer count and percentage of churn
SELECT SUM(CASE WHEN S.PLAN_ID = 4 THEN 1 ELSE 0 END) AS CHURN_COUNT,
       ROUND(100.0 * SUM(CASE WHEN S.PLAN_ID = 4 THEN 1 ELSE 0 END) / COUNT(DISTINCT CUSTOMER_ID), 1) AS CHURN_PERCENTAGE
FROM FOODIE_FI.SUBSCRIPTIONS S 
JOIN FOODIE_FI.PLANS P ON S.PLAN_ID = P.PLAN_ID;

-- Customers who churned right after trial
WITH CUST_RANK AS (
    SELECT S.CUSTOMER_ID, P.PLAN_ID, P.PLAN_NAME, S.START_DATE,
           ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE) AS RN 
    FROM FOODIE_FI.PLANS P
    JOIN FOODIE_FI.SUBSCRIPTIONS S ON P.PLAN_ID = S.PLAN_ID
)
SELECT COUNT(C1.CUSTOMER_ID) AS CHURN_AFTER_TRIAL,
       ROUND(100.0 * COUNT(C1.CUSTOMER_ID) / (SELECT COUNT(DISTINCT CUSTOMER_ID) FROM FOODIE_FI.SUBSCRIPTIONS), 0) AS PERCENT_CHURN
FROM CUST_RANK C1 
JOIN CUST_RANK C2 ON C1.CUSTOMER_ID = C2.CUSTOMER_ID 
    AND C1.PLAN_ID = 0 
    AND C2.PLAN_ID = 4 
    AND C2.RN - C1.RN = 1;

-- Breakdown of customer plans after trial
WITH AFTER_TRIAL AS (
    SELECT CUSTOMER_ID, S.PLAN_ID, LEAD(S.PLAN_ID, 1) OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE) AS NEXT_PLAN
    FROM FOODIE_FI.PLANS P
    JOIN FOODIE_FI.SUBSCRIPTIONS S ON P.PLAN_ID = S.PLAN_ID
)
SELECT NEXT_PLAN, COUNT(*) AS COUNT_CONVERSION,
       ROUND(100.0 * COUNT(*) / (SELECT COUNT(DISTINCT CUSTOMER_ID) FROM FOODIE_FI.SUBSCRIPTIONS), 1) AS PERCENT_CONVERSION
FROM AFTER_TRIAL 
WHERE PLAN_ID = 0 AND NEXT_PLAN IS NOT NULL
GROUP BY NEXT_PLAN;

-- Number and percentage of customer plans after initial free trial
WITH CUST_RANK AS (
    SELECT S.CUSTOMER_ID, P.PLAN_ID, P.PLAN_NAME, S.START_DATE,
           ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE) AS RN 
    FROM FOODIE_FI.PLANS P
    JOIN FOODIE_FI.SUBSCRIPTIONS S ON P.PLAN_ID = S.PLAN_ID
)
SELECT PLAN_ID, COUNT(*) AS COUNT_CONVERSION,
       ROUND(100.0 * COUNT(*) / (SELECT COUNT(DISTINCT CUSTOMER_ID) FROM FOODIE_FI.SUBSCRIPTIONS), 1) AS PERCENT_CONVERSION
FROM CUST_RANK 
WHERE RN = 2
GROUP BY PLAN_ID;

-- Customers upgrading to annual plan in 2020
WITH LATEST_PLAN AS (
    SELECT *, RANK() OVER (PARTITION BY CUSTOMER_ID ORDER BY START_DATE DESC) AS RANK
    FROM FOODIE_FI.SUBSCRIPTIONS
    WHERE START_DATE <= '2020-12-31'
)
SELECT COUNT(CUSTOMER_ID) AS COUNT 
FROM LATEST_PLAN 
WHERE RANK = 1 AND PLAN_ID = 3 AND EXTRACT(YEAR FROM START_DATE) = 2020;

-- Average days to annual plan from joining Foodie-Fi
WITH INITIAL_DATE AS (
    SELECT CUSTOMER_ID, MIN(START_DATE) AS INITIAL_DATE 
    FROM FOODIE_FI.SUBSCRIPTIONS
    GROUP BY CUSTOMER_ID
),
FINAL_DATE AS (
    SELECT CUSTOMER_ID, MIN(START_DATE) AS FINAL_DATE 
    FROM FOODIE_FI.SUBSCRIPTIONS
    WHERE PLAN_ID = 3
    GROUP BY CUSTOMER_ID
)
SELECT ROUND(AVG(CAST(FINAL_DATE - INITIAL_DATE AS DECIMAL)), 0) AS AVG_DAYS 
FROM INITIAL_DATE I 
JOIN FINAL_DATE F ON I.CUSTOMER_ID = F.CUSTOMER_ID;

-- Breakdown of average days to annual plan into 30-day periods
WITH INITIAL_DATE AS (
    SELECT CUSTOMER_ID, MIN(START_DATE) AS INITIAL_DATE 
    FROM FOODIE_FI.SUBSCRIPTIONS
    GROUP BY CUSTOMER_ID
),
FINAL_DATE AS (
    SELECT CUSTOMER_ID, MIN(START_DATE) AS FINAL_DATE 
    FROM FOODIE_FI.SUBSCRIPTIONS
    WHERE PLAN_ID = 3
    GROUP BY CUSTOMER_ID
),
BUCKETS AS (
    SELECT WIDTH_BUCKET(F.FINAL_DATE - I.INITIAL_DATE, 0, 360, 12) AS BUCKET,
           COUNT(I.CUSTOMER_ID) AS CUSTOMER_COUNT,
           ROUND(AVG(CAST(F.FINAL_DATE - I.INITIAL_DATE AS DECIMAL)), 0) AS AVERAGE_DAYS
    FROM INITIAL_DATE I
    JOIN FINAL_DATE F ON I.CUSTOMER_ID = F.CUSTOMER_ID
    GROUP BY WIDTH_BUCKET(F.FINAL_DATE - I.INITIAL_DATE, 0, 360, 12)
)
SELECT CASE 
           WHEN BUCKET = 1 THEN CONCAT((BUCKET - 1) * 30, ' - ', BUCKET * 30, ' DAYS') 
           ELSE CONCAT((BUCKET - 1) * 30 + 1, ' - ', BUCKET * 30, ' DAYS')
       END AS PERIOD,
       CUSTOMER_COUNT,
       AVERAGE_DAYS
FROM BUCKETS
GROUP BY BUCKET, CUSTOMER_COUNT, AVERAGE_DAYS
ORDER BY BUCKET;

-- Customers downgrading from Pro Monthly to Basic Monthly in 2020
WITH PRO_MONTHLY AS (
    SELECT CUSTOMER_ID, START_DATE
    FROM FOODIE_FI.SUBSCRIPTIONS
    WHERE PLAN_ID
    NOT IN (0, 4)
